<ol><li>xasxsa<font color="#ff0000">xaxaxsxsaxs</font><font color="#0000ff">xxsaxas</font><font color="#008000">xsxsaxasx</font><font color="#ffa500">xasxasxsax</font>xasxs<span style="background-color: orange;">ax</span></li><li>&lt;div&gt;&lt;font face="Arial"&gt;&lt;span style="font-size: 18pt; font-weight: bold;"&gt;Why Java is a platform-independent language?f&lt;/span&gt;&lt;br&gt;&lt;/font&gt;&lt;div&gt;&lt;font face="Arial"&gt;&lt;span style="font-size: 14pt;"&gt;Java is&amp;nbsp;platform-independent&amp;nbsp;&lt;/span&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt;because it uses a virtual machine&lt;/span&gt;&lt;span style="font-size: 14pt;"&gt;. The Java programming language and all APIs are compiled into bytecodes. Bytecodes are effectively platform-independent. The virtual machine takes care of the differences between the bytecodes for the different platforms.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 18pt; font-weight: bold;"&gt;&lt;font face="Arial"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 18pt; font-weight: bold;"&gt;&lt;font face="Arial"&gt;Why is java not a pure object-oriented programming language?&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 14pt;"&gt;&lt;font face="Arial"&gt;Java supports primitive data types - byte, boolean, char, short, int, float, long, and double and hence it is not a pure object-oriented.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: x-large; font-weight: bold;"&gt;&lt;font face="Arial"&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: x-large; font-weight: bold;"&gt;&lt;font face="Arial"&gt;Difference between Heap and Stack Memory in java?&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;table style="width: 1278.55px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;Property&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;Stack Memory&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;Heap Memory&lt;/span&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Size&lt;/td&gt;&lt;td&gt;The size of stack memory is smaller&lt;/td&gt;&lt;td&gt;The size of heap memory is larger&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Order&lt;/td&gt;&lt;td&gt;Stack memory is accessed in Last-In-First-Out (LIFO) order&lt;/td&gt;&lt;td&gt;Heap memory is dynamically allocated and does not follow any order&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Speed&lt;/td&gt;&lt;td&gt;Access to stack memory is faster because of Last-In-First-Out (LIFO) ordering&lt;/td&gt;&lt;td&gt;Access to heap memory is slower because it does not follow any order and is allocated dynamically&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Resizing&lt;/td&gt;&lt;td&gt;Resizing of variables is not allowed in stack&lt;/td&gt;&lt;td&gt;Resizing of variables is allowed in a heap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;Memory is allocated and deallocated automatically when a method starts and completes its execution respectively&lt;/td&gt;&lt;td&gt;Memory is allocated when objects are created and deallocated by the garbage collector when they are no longer in use&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Storage&lt;/td&gt;&lt;td&gt;Primitive values specific to a method and object references from the method are stored in the stack&lt;/td&gt;&lt;td&gt;The newly created objects and the JRE classes are stored in heap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Exception&lt;/td&gt;&lt;td&gt;StackOverflowError is thrown when there is no more space left in the stack for new method calls&lt;/td&gt;&lt;td&gt;OutOfMemoryError is thrown when there is no space left in a heap to allocate new objects&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Thread Safety&lt;/td&gt;&lt;td&gt;Each thread is allocated with a new stack, and it is thread-safe&lt;/td&gt;&lt;td&gt;Heap memory is shared across all threads, and it is not thread-safe&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Scope&lt;/td&gt;&lt;td&gt;Stack memory is used only by one thread of execution.&lt;/td&gt;&lt;td&gt;Heap memory is used by all the parts of the application.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lifetime&lt;/td&gt;&lt;td&gt;Stack memory is short lived.&lt;/td&gt;&lt;td&gt;Heap memory lives from the start till the end of application execution.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;span style="font-size: 18pt; font-family: &amp;quot;Times New Roman&amp;quot;; font-weight: bold;"&gt;Can we override static method in java?&lt;/span&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;No, you cannot override static method in java. You can only hide them.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-family: &amp;quot;Times New Roman&amp;quot;; font-weight: bold;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-family: &amp;quot;Times New Roman&amp;quot;; font-weight: bold;"&gt;Can you overload main method in java?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;Yes, you can overload main method in java but when you run your program,JVM will search for public static void main(String[] args) and execute that method.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-family: &amp;quot;Times New Roman&amp;quot;; font-weight: bold;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-family: &amp;quot;Times New Roman&amp;quot;; font-weight: bold;"&gt;What is the base class for all the classes?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;The super base class of all the Java classes is the java. lang. Object class.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&amp;nbsp;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-weight: bold;"&gt;Can we override private methods in java?&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="font-size: 14pt;"&gt;You cannot override a private or static method in Java. If you create a similar method with same return type and same method arguments in child class then it will hide the super class method; this is known as method hiding. Similarly, you cannot override a private method in sub class because it's not accessible there.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&amp;nbsp;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="color: rgb(81, 81, 81); font-size: 18pt; font-weight: bold;"&gt;What do you mean by data encapsulation?&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="font-size: 14pt;"&gt;Encapsulation is a mechanism through which we can wrap the data members and member methods of the class into a single unit which is called encapsulation.&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-weight: bold;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="font-size: 18pt; color: rgb(81, 81, 81); font-weight: bold;"&gt;Can you list down some of important method from object class?&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;span style="font-size: 14pt;"&gt;Important methods of object classes are:&lt;/span&gt;&lt;/p&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;/p&gt;&lt;ol&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;hashcode : It returns hash value of the object&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;equals : It compares the object references&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;wait : It causes current thread to wait until notify or notifyAll is not called&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;notify : Wakes up single thread which is waiting for lock&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;notifyAll: Wakes up all threads which is waiting for lock&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;toString : Provides String representation of the object&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;clone : This method is used to clone the object&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="font-size: 14pt;"&gt;finalize: This method is called when object is being garbage collected&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;Which two methods should you override while putting the custom object as Key in HashMap?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 14pt;"&gt;You need to override hashcode and equals method in custom class while putting objects of custom class in HashMap.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;What is the difference between HashMap and HashSet in java?&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;table style="width: 1278.55px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;Parameter&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;HashMap&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;HashSet&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Interface&lt;/td&gt;&lt;td&gt;HashMap implements Map interface&lt;/td&gt;&lt;td&gt;HashSet implement Set interface&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p lang="en-GB" style="margin: 0in; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;Method for&amp;nbsp;storing data&lt;br&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;It stores data in a form of key-&amp;gt;value pair.So it uses put(key,value) method for storing data&lt;/td&gt;&lt;td&gt;It uses add(value) method for storing data&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Duplicates&lt;/td&gt;&lt;td&gt;HashMap allows duplicate value but not duplicate keys&lt;/td&gt;&lt;td&gt;HashSet does not allow duplicate values.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Performance&lt;/td&gt;&lt;td&gt;It is faster than hashset as values are stored with unique keys&lt;/td&gt;&lt;td&gt;It is slower than HashMap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HashCode&amp;nbsp;Calculation&lt;/td&gt;&lt;td&gt;In hash map hashcode value is calculated using key object&lt;/td&gt;&lt;td&gt;In this, hashcode is calculated on the basis of value object. Hashcode can be same for two value object so we have to implement equals() method. If equals() method return false then two objects are different.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;Can we have an abstract class without having any abstract method in it?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Yes, we can have an abstract class without Abstract Methods as both are independent concepts. Declaring a class abstract means that it cannot be instantiated on its own and can only be sub-classed. Declaring a method abstract means that the Method will be defined in the subclass.&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;Have you heard about transient variables? When will you use it?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Transient is a variables modifier used in serialization. At the time of serialization, if we don't want to save the value of a particular variable in a file, then we use the transient keyword. When JVM comes across a transient keyword, it ignores the original value of the variable and saves the default value of that variable data type.&lt;span style="font-weight: bold;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight: bold;"&gt;Difference between throw and throws keywords in Java?&lt;/span&gt;&lt;/div&gt;&lt;table style="width: 1278.55px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;Throw&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span style="font-weight: bold;"&gt;Throws&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;The throw keyword is used to throw an exception explicitly in the code, inside the function, or a block of code.&lt;/td&gt;&lt;td&gt;The throws keyword is used in the method signature to declare an exception which might be thrown by the function while executing code.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;The throw is used within the method.&lt;/td&gt;&lt;td&gt;Throws are used with the method signature.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;In throw, we are allowed to throw only one exception at a time.&lt;/td&gt;&lt;td&gt;In throws, we can declare multiple exceptions using throws that can be thrown by the method.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;span style="font-weight:bold"&gt;Why Strings in java is immutable?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;A String object is likely to have one or many</li><li>references.&amp;nbsp;If several references point to the same String without even</li><li>knowing it, it would be bad if one of the references modified that String</li><li>value. That's why String objects are immutable.&lt;br&gt;&lt;/div&gt;&lt;div&gt;(&lt;span style="font-weight:bold"&gt;Second Ans)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The string is immutable means that we cannot</li><li>change the object itself, but we can change the reference to the object. The</li><li>string is made final to not allow others to extend it and destroy its</li><li>immutability.&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;Can we have a static method in the interface?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;you can have static methods in an interface</li><li>(with body). You need to call them using the name of the interface, just like</li><li>static methods of a class.&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;Can you declare the constructor as final?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;No, we cannot make constructors as final in</li><li>java.&lt;span style="font-weight:bold"&gt;&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;Difference between this() and super() in Java?&amp;nbsp;&lt;/span&gt;&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;The this() in the constructor refers to the</li><li>current class object. The super() in the constructor refers immediate parent</li><li>class object.&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;What is volatile in java?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For Java,&nbsp; volatile&nbsp; tells the compiler that</li><li>the value of a variable must never be cached as its value may change outside of</li><li>the scope of the program itself.&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;What are two different ways to call a garbage</li><li>collector?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;There are 2 ways to call the garbage</li><li>collector in java.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;</li><li><br></li><li>&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;You can use the Runtime. getRuntime().</li><li>gc() method- This class allows the program to interface with the Java Virtual</li><li>machine. The&nbsp; gc()&nbsp; method allows us to call the garbage collector method. You</li><li>can also use the System. gc() method which is common&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;How many objects will be created below:&lt;/span&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;String str1= new String("John");&lt;/span&gt;&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-weight:bold"&gt;String str2= new String("John");&lt;/span&gt;&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Though we are creating 2 instances, in the</li><li>memory of String Pool we will have only one instance of it create with 2</li><li>references pointing to it in Constant Pool&amp;nbsp;&lt;span style="font-weight:bold"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;</li></ol><div><br></div><div><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="22" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">How many objects will be
     created below:&nbsp;</span></li>
</ol>

<p style="margin:0in;margin-left:.375in;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">String str1= new
String("John");&nbsp;</span></p>

<p style="margin:0in;margin-left:.375in;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">String str2= new
String("John"); </span></p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Though we are creating 2 instances, in
the memory of String Pool we will have only one instance of it create with 2
references pointing to it in Constant Pool </p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="23" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Can you differentiate
     between a Checked Exception and an Unchecked exception? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">A checked exception is caught at
compile time whereas a runtime or unchecked exception is, as it states, at
runtime. A checked exception must be handled either by re-throwing or with a
try-catch block, whereas an unchecked isn't required to be handled.</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><br></p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="25" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">You have started three
     threads from main threads. You need to make sure main thread complete
     last. How will you do it?&nbsp;</span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Using join method:</p><p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="26" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What do you mean by
     Platform independence of java? </span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">You can write and compile program in
one Operating system and run in other operating system.&nbsp;</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">For
example:&nbsp;</span></p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">You can compile program in Windows and
can run it in Unix. </p><p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="27" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is difference between
     JVM, JRE and JDK ? </span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">JDK-&gt;</span>
JDK stands for a java development kit, it internally contains JRE &amp; JVM.
JDK provides all the tools to work with the JAVA language.</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">JRE-&gt;</span>
JRE stands for Java runtime environment, it provides an environment to execute
the java program. It internally </p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Contains JVM which is responsible to
execute a java program.</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">























</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">JVM-&gt;</span>
JVM stands for Java Virtual Machine. It is virtual machine which actually runs
the byte code.</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><br></p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="28" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What are memory areas
     allocated in JVM?&nbsp;</span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Memory areas allocated in JVM are: </p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">



</p><ul type="circle" style="margin-left:.75in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in">
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">Heap
     area&nbsp;</span></li>
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">Method
     area&nbsp;</span></li>
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">JVM
     language stacks&nbsp;</span></li>
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">Program
     counter (PC) register&nbsp;</span></li>
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">Native
     method stacks</span></li>
</ul><div><p style="color:black;background:lime;mso-highlight:lime;margin:0in;margin-left:
.375in;font-family:&quot;Times New Roman&quot;;font-size:18.0pt;color:#515151"><span style="font-weight:bold">What is Oops in java? </span></p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Oops in java is to improve code
readability and reusability by defining a Java program efficiently. The main
principles of object-oriented programming are abstraction, encapsulation,
inheritance, and polymorphism. These concepts aim to implement real-world
entities in programs.</p>

<p style="margin:0in;font-family:&quot;Times New Roman&quot;;font-size:18.0pt;color:#515151">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="30" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Abstraction? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Data abstraction is the process of
hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces </p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="31" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Encapsulation? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Encapsulation is a mechanism through
which we can wrap the data members and member methods of the class into a
single unit which is called encapsulation.</p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="32" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Polymorphism in
     java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Polymorphism is a Greek word whose
meaning is the same object having different behaviour.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">And </p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Polymorphism means "many
forms", and it occurs when we have many classes that are related to each
other by inheritance.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;is a two types </p>

<ul type="circle" style="margin-left:.75in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in">
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">Compile
     time polymorphism</span></li>
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">Runtime
     polymorphism</span></li>
</ul>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="33" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Inheritance in
     java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">When we construct a new class from an
existing class in such a way that the new class access all the features &amp;
properties of an existing class called inheritance.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Note:-</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">1) In java extends keyword is used to
perform inheritance.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">2) It provides code reusability.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">3) We can’t access private members of
class through inheritance.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">4) A subclass contains all the
features of a super class so, we should create the object of the subclass.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">5) Method overriding is only possible
through inheritance.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Second
:</span></p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Inheritance is a mechanism wherein a
new class is derived from an existing class. In Java, classes may inherit or
acquire the properties and methods of other classes. A class derived from
another class is called a subclass, whereas the class from which a subclass is
derived is called a superclass </p>

<p style="margin:0in;font-family:&quot;Times New Roman&quot;;font-size:18.0pt;color:#515151">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="34" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Constructor in
     java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">A constructor in Java is&nbsp;a
special method that is used to initialize objects. The constructor is called
when an object of a class is created.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">constructors can be divided into 3
types:&nbsp;No- Arg Constructor.&nbsp;Parameterized Constructor.&nbsp;Default
Constructor</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Second
:</span></p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">A constructor in Java is a special
method that is used to initialize objects. The constructor is called when an
object of a class is created. </p>

<p style="margin:0in;font-family:&quot;Times New Roman&quot;;font-size:18.0pt;color:#515151">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="35" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Why main() in java is
     declared as public static void main? What if the main method is declared
     as&nbsp;private? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Since the main method in Java is not
supposed to return any value, it's made void which simply means main is not
returning anything. Summary: 1. The main method must be declared public, static
and void in Java otherwise, JVM will not able to run Java program. </p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="36" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is an immutable
     object in java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">The immutable objects are objects
whose value cannot be changed after initialization. We cannot change anything
once the object is created. For example, primitive objects such as int, long,
float, double, all legacy.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">classes, Wrapper class, String class,
etc. In a nutshell, immutable means unmodified or unchangeable. </p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="37" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What are access modifier
     available in java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Java provides four types of access
modifiers or visibility specifiers i.e. default, public, private, and protected&nbsp;</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><br></p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><br></p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="39" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Can one interface
     implement another interface in java?</span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">No, One interface cannot implement
another interface. It can extend it using extends keyword.&nbsp;</p><p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="40" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is marker interface? </span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">







</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Marker interfaces are interfaces which
have no method but it is used to indicate JVM to behave specially when any
class implement these interfaces.&nbsp;</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><br></p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="42" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Can you override static
     methods in Java?</span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">No, you cannot override static methods
in Java. You can create same method in child class but it won’t be dynamic
polymorphism. It will be method hiding. Static methods belong at class level
not at object level hence you cannot override static method </p><p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="43" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Enum in java? </span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Java Enum is special data type which
represents list of constants values. It is a special type of java class. It can
contain constant, methods and constructors etc. </p><p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;">&nbsp;</p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="44" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Can we have try without
     catch block in java?</span></li>
</ol><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Yes, we can have try without catch
block by using finally block. You can use try with finally. As you know finally
block always executes even if you have exception or return statement in try
block except in case of System.exit().</p><p style="margin:0in;font-family:&quot;Times New Roman&quot;;font-size:18.0pt;color:#515151">&nbsp;</p><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="45" style="vertical-align: middle; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What are ways to create a
     thread in java? </span></li>
</ol><p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;">&nbsp;</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">There are two ways to create a thread
in java&nbsp;</p><p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">























</p><ul type="circle" style="margin-left:.75in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in">
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">By
     extending thread class&nbsp;</span></li>
 <li style="vertical-align: middle;" lang="en-GB"><span style="font-family:&quot;Times New Roman&quot;;font-size:14.0pt">By
     implementing the Runnable interface.</span></li>
</ul><div><ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="47" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Define states of thread in java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">There are 5 states of thread in
java&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">New :</span>
When you create a thread object and it is not alive yet.</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Runnable:</span>
When you call start method of thread, it goes into Runnable state. Whether it
will execute immediately or execute after some times , depends on thread
scheduler.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Running
:</span> When thread is being executed, it goes to running state. </p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Blocked
:</span> When thread waits for some resources or some other thread to complete
(due to thread’s join), it goes to blocked state.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Dead:</span>
When thread’s run method returns, thread goes to dead state. </p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="48" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Can we call run method directly to start a thread? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">No, you cannot directly call the run
method to start a thread. You need to call the start method to create a new
thread. If you call the run method directly, it won’t create a new thread and
it will be in the same stack as the main. </p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="49" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is garbage Collection? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Garbage collection is process of
reclaiming the runtime unused memory automatically. In other words, it is a way
to destroy the unused object.</p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="50" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is System.gc()? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">This method is used to invoke garbage
collection for clean-up unreachable object but it is not guaranteed that when
you invoke System.gc() , garbage collection will definitely trigger.</p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="51" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is use of finalize() method in object class? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Finalize method get called when object
is being collected by Garbage Collector. This method can be used to write clean
code before object is collected by Garbage Collector.</p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="52" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is difference between final, finally and finalize
     in Java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">final :</span>
Final is a keyword which is used with class to avoid being extended, with
instance variable so they cannot reassigned, with methods so that they cannot
be overridden.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">finally
:</span> Finally is a keyword used with try, catch and finally blocks. Finally
block executes even if there is an exception. It is generally used to do some
clean-up work.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">finalize
:</span> Finalize is a method is used to invoke garbage collection for clean-up
unreachable object but it is not guaranteed that when you invoke System.gc(),
garbage collection will definitely trigger. </p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="53" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">How do you prevent a class from being sub-classed in
     Java? </span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">You can prevent a class from being
subclasses by using the final keyword in the class's declaration. Similarly,
you can prevent a method from being overridden by subclasses by declaring it as
a final method. An abstract class can only be subclasses; it cannot be
instantiated. </p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="54" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Will below program compile:&nbsp;</span></li>
</ol>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">package
com.java;&nbsp;</span></p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">interface
Decorable {&nbsp;</span></p>

<p style="margin-left:.375in;margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">String
color="Blue";&nbsp;</span></p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">}&nbsp;</span></p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">public class
Room implements Decorable{&nbsp;</span></p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">public static
void main(String[] args) {&nbsp;</span></p>

<p style="margin-left:.375in;margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">System.out.println("Decorating
room with Color: "+Room.color); }</span></p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151"><span style="font-weight:bold">}&nbsp;</span></p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Yes, it will be compile.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Interface‘s variables are by default
public static final Ans as Room implements Decorable, you will be able to
access color variable of Decorable interface.&nbsp;</p>

<p style="margin: 0in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="55" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is the use of Classloader in Java?&nbsp;</span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">A Java program is made up of a
different number of custom classes and pre-defined classes. When a program is
executed, JVM is used to load all the content of that needed class and through
the use of Classloader JVM, it finds that class.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">There are three types of
Classloaders:&nbsp;</p>

<p style="margin:0in;margin-left:.75in"><span style="font-family: &quot;Segoe UI Symbol&quot;; font-size: 14pt;" lang="en-GB">● </span><span style="font-weight:
bold;font-family:&quot;Times New Roman&quot;;font-size:14.0pt;color:#515151" lang="en-IN">System
Class Loader</span><span style="font-weight:bold;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151" lang="en-IN">&nbsp;</span></p>

<p style="margin: 0in 0in 0in 0.75in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">It loads all the classes from the
classpath.&nbsp;</p>

<p style="margin:0in;margin-left:.75in;font-size:14.0pt"><span style="font-family: &quot;Segoe UI Symbol&quot;;" lang="en-GB">● </span><span style="font-weight:bold;font-family:&quot;Times New Roman&quot;;color:#515151" lang="en-IN">Extension ClassLoader&nbsp;</span></p>

<p style="margin: 0in 0in 0in 0.75in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">It loads all the classes from the
extension directory.&nbsp;</p>

<p style="margin:0in;margin-left:.75in;font-size:14.0pt"><span style="font-family: &quot;Segoe UI Symbol&quot;;" lang="en-GB">● </span><span style="font-weight:bold;font-family:&quot;Times New Roman&quot;;color:#515151" lang="en-IN">Bootstrap Class Loader&nbsp;</span></p>

<p style="margin: 0in 0in 0in 0.75in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">It loads all the pre-defined java
classes.&nbsp;</p>

<p style="margin:0in;margin-left:.375in;font-family:&quot;Times New Roman&quot;;
font-size:11.0pt">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="56" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">Which class is a superclass of all classes?&nbsp;</span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Java.lang. The object is the root
class for all the java classes and we don’t need to extend it. Every other java
classes fall back under the object. All the different non-primitive types
including arrays are inherited directly or indirectly from this class.</p>

<p style="margin:0in;font-family:&quot;Times New Roman&quot;;font-size:11.0pt">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="57" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is the static keyword?&nbsp;</span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">The static keyword is used with a
class level variable to make it global so all the objects will be able to share
the same variable. It can also be used with methods. A static method can access
only static variables of the class and invoke only a static method of the
class.</p>

<p style="margin-top:7pt;margin-bottom:0pt;font-family:&quot;Times New Roman&quot;;
font-size:18.0pt;color:#515151">&nbsp;</p>

<ol type="1" style="margin-left: 0.375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: &quot;Times New Roman&quot;; font-size: 18pt; font-weight: bold;">
 <li value="58" style="vertical-align: middle; margin-top: 7pt; margin-bottom: 0pt; color: rgb(81, 81, 81);"><span style="font-size: 18pt;">What is Type casting in Java?&nbsp;</span></li>
</ol>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">Casting in Java is one of the top
topics from where you can get questions in your interview. When we assign a
value of one data type to a different data type then these two data types might
not be compatible with each other and needs conversion. If data types are
compatible with each other like, in case of the conversion of int value to long
then automatic conversion is done by Java and doesn’t require typecasting. But
if data types are not compatible with each other then they need to be cast for
conversion.&nbsp;</p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB"><span style="font-weight:bold">Syntax&nbsp;</span></p>

<p style="margin: 0in 0in 0in 0.375in; font-family: &quot;Times New Roman&quot;; font-size: 14pt;" lang="en-GB">dataType variablename = (dataType)
variableToConvert;&nbsp;</p></div></div></div><p></p>